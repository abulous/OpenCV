These are the steps that I took in order to automatically boot into my Python Script on the Raspberry Pi 3. There are other possible ways to do this, but the general order that I want to boot on my Raspberry Pi is this:

1) boot into LXDE desktop environment. This is the standard GUI Linux desktop service that comes on the NOOBS installation of the Pi. This is done automatically, so nothing needs to be done.

2) Next, automatically boot into the terminal:
 
$ sudo nano ~/.config/lxsession/LXDE-pi/autostart

at the bottom, type: 

@lxterminal  

"control x", "y", "enter"

3) Then, write the script, make it an executable file, and call it to run automatically at the start of a terminal window:

$ cd ~
$ sudo nano NameOfAutoBootScript.sh


source /home/pi/.profile
workon cv
python3 /home/pi/NameOfPythonScript.py


"Control X", "Y", "Enter"

Make it an executable file:

$ chmod +x NameOfAutoBootScript.sh

Call the NameOfAutoBootScript to run automatically at the start of the terminal window:

$ sudo nano ~/.bashrc

Scroll to the bottom and type:

~/NameOfAutoBootScript.sh

"Control X", "Y", "Enter"

# My OpenCV script returns errors half the time for reasons unknown. 
# In order to get around this I run an "until" loop for my script.
# Otherwise if you're confident your script will run %100 of the time, simply bypass this part:
# Also, I want to include a scheduled shutdown time in number of minutes since it starts running. This example is 10 hours.

$ sudo nano ~/SomeOtherNameScript.sh

sudo shutdown -P 600 &
until /home/pi/NameOfAutoBootScript.sh; do
	echo "Are you running?...">&2
	sleep 1
done

"Control X", "Y", "Enter"

Make it an executable file:

$ chmod +x SomeOtherNameScript.sh

# Instead of "NameOfAutoBootScript.sh" at the bottom of your .bashrc, type ~/"SomeOtherNameScript.sh". 
# It would be redundant to have both.

5) Also, I want the OpenCV display window to automatically boot without a menu bar,  title bar, and in the center of the screen. Important to note: I run my Python Display window at 640 x 480. This saves RAM space. The Pi's resolution will need to be changed to the same resolution in order to fill up the screen.

$ sudo nano ~/.config/openbox/lxde-pi-rc.xml

To take away menu bar for all applications, scroll down a little ways to 

<titleLayout>then delete all the letters in between</titleLayout>

To take away title bar I can either take it away from specific applications or all applications. Scroll to the bottom and you'll see a large commented out section giving examples of how to do so. If you want to edit specific applications you will need to find out the name and class of the application. To do this you need to:

First open and run which ever application you want to edit. Then in terminal type

$ xprop WM_CLASS

Then click on the window of the application that is running and the name and class will be returned in the terminal window. I wanted to edit the window displaying my OpenCV video feed. The name and class was the name I gave to the "cv2.imshow" function. It was then displayed as the title in the title bar. I named it "PANOPTICON", when I ran "xprop WM_CLASS" the class and name that was returned was "PANOPTICON". So in OpenBox, I scrolled to the bottom and typed this:

<application  name="PANOPTICON", class="PANOPTICON">
	<decor>no</decor>  #this removes the title bar
	<position>
		<x>0</x>  #this  positions the window in the center of the screen
		<y>0</y>
	</position>
</application>

"ctl x", "y", "enter"

If you want to have these changes applied to all applications:

<application  class="*">  # Asterisk "*" is the wildcard declaring all applications. 
	<decor>no</decor>  # this removes the title bar
	<position>  # this  positions the window in the center of the screen, x and y must be called. You may need to experiment for each application.		<x>0</x>  
		<y>0</y>
	</position>
</application>

"ctl x", "y", "enter"

# apply the changes in openbox, or you can reboot, to apply the changes
$openbox --reconfigure

# I also want my mouse cursor turned off.

$ sudo apt-get install unclutter
$ sudo nano ~/.config/lxsession/LXDE-pi/autostart

# Add this line to the bottom of the script:
@unclutter -idle 0

"CTL X", "Y", "ENTER"

$ sudo reboot

I haven't troubleshooted it, but I'm sure you could by-pass the LXDE, terminal, and/or virtual environment. But I believe that booting through these steps allows for the most flexibility to either navigate through errors, or do whatever on the LXDE environment. 

